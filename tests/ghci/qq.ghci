-- Should be: [1] 1
runR $ H.print =<< [r| 1 |]

-- Should be: [1] 2
runR $ H.print =<< [r| 1 + 1 |]

-- Should be: [1] "1" "2" "3"
runR $ H.print =<< [r| c(1,2,"3") |]

-- Should be: [1] 2
runR $ H.print =<< [r| x <- 2 |]

-- Should be: [1] 3
runR $ H.print =<< [r| x+1 |]

---- Should be: [1] 6
let y = (5::Double)
runR $ H.print =<< [r| y_hs + 1 |]

---- Should be: Closure ???
runR $ H.print =<< [r| function(y) y_hs + y |]

-- Should be 8
runR $ H.print =<< [r| z <- function(y) y_hs + y |]
runR $ H.print =<< [r| z(3) |]

-- Should be [1] 1 2 3 4 5 6 7 8 9 10
runR $ H.print =<< [r| y <- c(1:10) |]
let foo1 = (\x -> (return $ x+1 :: IO Double))
let foo2 = (\x -> (return $ map (+1) x :: IO [Double]))

-- Should be [1] 2
runR $ H.print =<< [r| (function(x).Call(foo1_hs,x))(2) |]

-- Should be [1] 2 3 4 5 6 7 8 9 10 11
runR $ H.print =<< [r| (function(x).Call(foo2_hs,x))(y) |]

-- Should be [1] 43
runR $ H.print =<< [r| x <- 42 ; x + 1 |]

-- Should be [1] 1 2 3
let xs = [1,2,3]::[Double]
runR $ H.print =<< [r| xs_hs |]

-- Should be [1] 8
runR $ H.print =<< [r| foo1_hs(7) |]
