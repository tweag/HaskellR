:set -XDataKinds
:set -XScopedTypeVariables
:set -XViewPatterns

:m +Data.Int
import Criterion.Main
import Language.Haskell.TH.Quote
import qualified Foreign.R as R
import qualified Language.R.Literal.Unsafe as Unsafe
import Control.Monad.R.Unsafe (unsafeRToIO, unsafeIOToR)

import System.FilePath
 

:{
let hFib :: Foreign.R.Internal.SEXP Foreign.R.Internal.Int -> H.Prelude.R s (Foreign.R.Internal.SEXP Foreign.R.Internal.Int)
    hFib n@(Unsafe.fromSEXP -> (0 :: Int32)) = H.protectRegion $ do
        n' <- Foreign.R.protect n
        fmap (Foreign.R.unSEXP . (flip Foreign.R.asTypeOf n')) [r| as.integer(0) |]
    hFib n@(Unsafe.fromSEXP -> (1 :: Int32)) = H.protectRegion $ do
        n' <- Foreign.R.protect n
        fmap (Foreign.R.unSEXP . (flip Foreign.R.asTypeOf n')) [r| as.integer(1) |]
    hFib n                              = H.protectRegion $ do
        n' <- Foreign.R.protect n
 	fmap (Foreign.R.unSEXP . (flip Foreign.R.asTypeOf n')) [r| as.integer(hFib_hs(as.integer(n_hs-1)) + hFib_hs(as.integer(n_hs -2))) |]
:}

H.performR $(quoteExp (quoteFile r) ("tests" </> "R" </> "fib.R"))

:{
defaultMain [
    bgroup "fib"
      [ bench "runtime-qq" $
          whnfIO $ unsafeRToIO $ [r| fib(10) |]
      , bench "runtime-qq-hybrid" $
          whnfIO $ unsafeRToIO $ hFib =<< unsafeIOToR (Unsafe.unsafeMkSEXP (10 :: Int32))
      ]
   ]
:}
