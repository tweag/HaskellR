:set -XDataKinds
:set -XScopedTypeVariables

:m +Data.Int 
import Criterion.Main
import Language.Haskell.TH.Quote
import System.FilePath


:{
let hFib :: Foreign.R.Internal.SEXP Foreign.R.Internal.Int -> H.Prelude.R s (Foreign.R.Internal.SEXP Foreign.R.Internal.Int)
    hFib n@(H.Prelude.fromSEXP -> (0 :: Int32)) = H.protectRegion $ fmap (Foreign.R.unSEXP . Foreign.R.cast Foreign.R.Int) [r| as.integer(0) |]
    hFib n@(H.Prelude.fromSEXP -> (1 :: Int32)) = H.protectRegion $ fmap (Foreign.R.unSEXP . Foreign.R.cast Foreign.R.Int) [r| as.integer(1) |]
    hFib n                              = H.protectRegion $ do
        fmap (Foreign.R.unSEXP . Foreign.R.cast Foreign.R.Int) [r| as.integer(hFib_hs(as.integer(n_hs - 1)) + hFib_hs(as.integer(n_hs - 2))) |]
:}

H.Prelude.unsafeRToIO $ $(quoteExp (quoteFile r) ("tests" </> "R" </> "fib.R"))

:{
defaultMain [
    bgroup "fib"
      [ bench "runtime-qq" $
          whnfIO $ H.unsafeRToIO [r| fib(10) |]
      , bench "runtime-qq-hybrid" $
          whnfIO $ H.Prelude.unsafeRToIO $ hFib =<< H.Prelude.unsafeIOToR (Language.R.Literal.Unsafe.unsafeMkSEXP (10 :: Int32))
      ]
   ]
:}
