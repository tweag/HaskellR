:set -XDataKinds
:set -XScopedTypeVariables

:m +Data.Int
import Criterion.Main
import Language.Haskell.TH.Quote
import qualified Foreign.R as R
 
import System.FilePath
 

:{
let hFib :: Foreign.R.SEXP s Foreign.R.Int -> H.Prelude.R s (Foreign.R.SEXP s Foreign.R.Int)
    hFib n@(H.fromSEXP -> (0 :: Int32)) = fmap (flip R.asTypeOf n) [r| as.integer(0) |]
    hFib n@(H.fromSEXP -> (1 :: Int32)) = fmap (flip R.asTypeOf n) [r| as.integer(1) |]
    hFib n                              = H.withProtected (return n) $ const $
        fmap (flip R.asTypeOf n) [r| as.integer(hFib_hs(as.integer(n_hs - 1)) + hFib_hs(as.integer(n_hs - 2))) |]
:}

$(quoteExp (quoteFile r) ("tests" </> "R" </> "fib.R"))

:{
defaultMain [
    bgroup "fib"
      [ bench "runtime-qq" $
          whnfIO $ [r| fib(10) |]
      , bench "runtime-qq-hybrid" $
          whnfIO $ H.unsafeRToIO $ hFib $ H.mkSEXP (10 :: Int32)
      ]
   ]
:}
